public ClvResponse getCLVs(@AuthenticatedId int authenticationId) {
        Buyer buyer = getByAuthenticationId(authenticationId);
        List<Order> sortedDateOrders = buyer.getOrders().stream()
                .sorted(Comparator.comparing(Order::getCreatedTime))
                .collect(Collectors.toList());

        BigDecimal i = new BigDecimal(1);
        BigDecimal previousSpending = new BigDecimal(0);
        BigDecimal previousMargin = new BigDecimal(0);
        BigDecimal previousDiscount = new BigDecimal(0);
        LocalDateTime previousDate = null;

        ClvResponse clvResponse = new ClvResponse();

        BigDecimal marginAll = new BigDecimal(0);
        BigDecimal retentionAll = new BigDecimal(0);
        BigDecimal discountAll = new BigDecimal(0);
        BigDecimal spendingsAll = new BigDecimal(0);

        for (Order order : sortedDateOrders)
            for (OrderItem orderItem : order.getOrderItems())
                spendingsAll = spendingsAll.add(orderItem.getPrice().multiply(new BigDecimal(orderItem.getAmount())));
        // Each order is time gap
        for (Order order : sortedDateOrders) {
            i = i.add(new BigDecimal(1));
            // Margin - average profit generated per transaction
            BigDecimal margin = new BigDecimal(0);
            // Retention - retention value
            BigDecimal retention = new BigDecimal(0);
            // Discount - retention value
            BigDecimal discount = new BigDecimal(0);

            BigDecimal spendings = new BigDecimal(0);
            BigDecimal j = new BigDecimal(0);
            for (OrderItem orderItem : order.getOrderItems()) {
                // Margin calculation
                margin = margin.add(orderItem.getPrice()
                        .multiply(new BigDecimal(orderItem.getCommissionPercentage()).divide(new BigDecimal(100), 10,
                                RoundingMode.HALF_UP))
                        .multiply(new BigDecimal(orderItem.getAmount())));

                // Retention spendings
                spendings = spendings.add(orderItem.getPrice().multiply(new BigDecimal(orderItem.getAmount())));

                // Discount
                discount = discount.add(new BigDecimal(((double) orderItem.getCommissionPercentage() / 2) / 100.0));
            }

            if (i.equals(new BigDecimal(1))) {
                previousMargin = margin;
                previousSpending = spendings;
                previousDiscount = discount;
                previousDate = order.getCreatedTime();
                continue;
            }

            BigDecimal timeDelta = new BigDecimal(
                    getMillisecondsDifferenceToDays(order.getCreatedTime(), previousDate));
            if (timeDelta.add(new BigDecimal(1)).compareTo(new BigDecimal(0)) != 0)
                retention = retention
                        .add(spendings.subtract(previousSpending).divide(timeDelta.add(new BigDecimal(1)), 10,
                                RoundingMode.HALF_UP));
            if (!spendingsAll.equals(new BigDecimal(0))) {
                if (spendingsAll.compareTo(new BigDecimal(0)) != 0)
                    retention = retention.divide(spendingsAll, 10, RoundingMode.HALF_UP);
            }

            // Formula with static and retention difference
            if (!discount.subtract(retention).equals(new BigDecimal(-1)))
                retention = retention.add(new BigDecimal(1));
            clvResponse.getCLVsGapsStatic().add(new TimeValue(order.getCreatedTime(),
                    margin.multiply(retention.divide(new BigDecimal(1).add(discount).subtract(retention), 10,
                            RoundingMode.HALF_UP))));

            // Formula with difference with previous value
            if (previousDiscount.subtract(retention).equals(new BigDecimal(-1)))
                retention = retention.add(new BigDecimal(1));
            clvResponse.getCLVsGapsDelta().add(new TimeValue(order.getCreatedTime(),
                    margin.subtract(previousMargin).multiply(retention
                            .divide(new BigDecimal(1).add(discount.subtract(previousDiscount)).subtract(retention), 10,
                                    RoundingMode.HALF_UP))));

            previousMargin = margin;
            previousSpending = spendings;
            previousDiscount = discount;

            marginAll.add(margin);
            retentionAll.add(retention);
            discountAll.add(discount);
        }

        // Formula with average dividing
        clvResponse
                .setCLVsAverage(
                        marginAll.divide(i, 10, RoundingMode.HALF_UP)
                                .multiply(retentionAll.divide(i, 10, RoundingMode.HALF_UP)
                                        .divide(new BigDecimal(1).add(discountAll.divide(i, 10, RoundingMode.HALF_UP))
                                                .subtract(retentionAll.divide(i, 10, RoundingMode.HALF_UP)), 10,
                                                RoundingMode.HALF_UP)));
        return clvResponse;
    }